name: CI/CD Pipeline

on:
  push:
    branches: [develop, main, master]
  pull_request:
    branches: [develop, main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: demo_ximopet
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, phar, tokenizer, xmlwriter, zip, curl, fileinfo, openssl, bcmath
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Install NPM Dependencies
        run: npm ci

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 755 storage bootstrap/cache

      - name: Configure Database for Testing
        run: |
          php artisan config:clear
          php artisan cache:clear
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=demo_ximopet" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          echo "APP_ENV=testing" >> .env

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... (attempt $i)"
            sleep 2
          done

      - name: Verify Database Connection
        run: |
          mysql -u root -proot -h 127.0.0.1 -P 3306 -e "SHOW DATABASES;"
          mysql -u root -proot -h 127.0.0.1 -P 3306 -e "SELECT 1;"

      - name: Create Test Database
        run: |
          mysql -u root -proot -h 127.0.0.1 -P 3306 -e "CREATE DATABASE IF NOT EXISTS demo51_test;"
          mysql -u root -proot -h 127.0.0.1 -P 3306 -e "GRANT ALL PRIVILEGES ON demo51_test.* TO 'root'@'%';"
          mysql -u root -proot -h 127.0.0.1 -P 3306 -e "FLUSH PRIVILEGES;"

      - name: Test Laravel Database Connection
        run: php artisan tinker --execute="DB::connection()->getPdo();"

      - name: Run Migrations
        run: php artisan migrate --force

      - name: Seed Database (if needed)
        run: |
          if [ -f "database/seeders/DatabaseSeeder.php" ]; then
            php artisan db:seed --force
          fi

      # Uncomment this to run tests
      # - name: Run Tests
      #   run: php artisan test --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Check if PHP CS Fixer exists
        id: check-cs-fixer
        run: |
          if [ -f "vendor/bin/php-cs-fixer" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run PHP CS Fixer
        if: steps.check-cs-fixer.outputs.exists == 'true'
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Check if PHPStan exists
        id: check-phpstan
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run PHPStan
        if: steps.check-phpstan.outputs.exists == 'true'
        run: vendor/bin/phpstan analyse

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run Composer Audit
        run: composer audit --format=plain

      - name: Check if Security Checker exists
        id: check-security-checker
        run: |
          if [ -f "vendor/bin/security-checker" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Security Checker
        if: steps.check-security-checker.outputs.exists == 'true'
        run: vendor/bin/security-checker security:check composer.lock

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-assets
          path: public/build/

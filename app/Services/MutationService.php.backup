<?php

namespace App\Services;

use Illuminate\Support\Str;
use App\Models\Feed;
use App\Models\Supply;
use App\Models\CurrentFeed;
use App\Models\CurrentSupply;
use App\Models\Farm;
use App\Models\FeedMutationItem;
use App\Models\FeedStock;
use App\Models\Livestock;
use App\Models\SupplyMutationItem;
use App\Models\Mutation;
use App\Models\MutationItem;
use App\Models\SupplyStock;
use App\Models\Unit;
use App\Models\UnitConversion;
use App\Services\ItemConversionService;
use Exception;
use Throwable;
use Illuminate\Support\Facades\DB;

use App\Models\FeedPurchase;

class MutationService
{

    public static function feedMutation(array $data, array $items, ?string $mutationId = null): Mutation
    {
        return DB::transaction(function () use ($data, $items, $mutationId) {
            $isUpdate = !empty($mutationId);

            // Cek apakah mutation sudah ada
            $mutation = $isUpdate
                ? Mutation::findOrFail($mutationId)
                : new Mutation();

            // Update atau isi data mutation
            $mutation->fill([
                'id' => $mutationId ?? Str::uuid(),
                'type' => 'feed',
                'mutation_scope' => 'internal', // Default scope for feed mutations
                'date' => $data['date'],
                'from_livestock_id' => $data['source_livestock_id'],
                'to_livestock_id' => $data['destination_livestock_id'],
                'notes' => $data['notes'] ?? null,
                'created_by' => auth()->id(),
                'updated_by' => auth()->id(),
            ]);

            if (!$isUpdate) {
                $mutation->save();
            } else {
                $mutation->update();
                // Jika update: hapus item lama dan stock lama di tujuan
                $oldMutationItems = MutationItem::where('mutation_id', $mutation->id)->get();

                // Hapus stock yang dibuat dari mutasi ini di tujuan
                foreach ($oldMutationItems as $oldItem) {
                    FeedStock::where('source_id', $mutation->id)
                        ->where('source_type', 'mutation')
                        ->delete();
                }

                // Kembalikan quantity_mutated di source
                foreach ($oldMutationItems as $oldItem) {
                    $sourceStock = FeedStock::find($oldItem->stock_id);
                    if ($sourceStock) {
                        $sourceStock->quantity_mutated -= $oldItem->quantity;
                        $sourceStock->save();
                    }
                }

                // Hapus mutation items
                MutationItem::where('mutation_id', $mutation->id)->delete();
            }

            // Tambahkan metadata tentang unit-unit yang digunakan di payload
            $itemsMetadata = [];
            foreach ($items as $index => $item) {
                // Get feed item with its conversion information
                $feed = Feed::with('unit')->findOrFail($item['item_id']);
                $unitId = $item['unit_id'];
                $unit = Unit::find($unitId);

                // Get conversion units from feed payload
                $conversionUnits = collect($feed->payload['conversion_units'] ?? []);

                // Find the specific unit conversion data
                $unitConversion = $conversionUnits->firstWhere('unit_id', $unitId);

                // Store metadata including unit and conversion info
                $itemsMetadata[] = [
                    'item_id' => $item['item_id'],
                    'item_name' => $feed->name,
                    'quantity' => $item['quantity'],
                    'type' => $item['type'],
                    'unit_id' => $unitId,
                    'unit_name' => $unit ? $unit->name : null,
                    'conversion_details' => $unitConversion,
                    'original_input' => [
                        'quantity' => $item['quantity'],
                        'unit_id' => $unitId,
                    ],
                ];
            }

            // Update mutation payload with metadata
            $mutation->payload = [
                'items_metadata' => $itemsMetadata,
                'source_livestock_name' => Livestock::find($data['source_livestock_id'])?->name,
                'destination_livestock_name' => Livestock::find($data['destination_livestock_id'])?->name,
            ];
            $mutation->save();

            // Mutasi item dengan menyimpan data unit lengkap
            self::mutateFeedItems(
                items: $items,
                sourceLivestockId: $mutation->from_livestock_id,
                targetLivestockId: $mutation->to_livestock_id,
                mutationId: $mutation->id,
                date: $mutation->date,
                dryRun: false
            );

            return $mutation;
        });
    }

    public static function mutateFeedItems(array $items, string $sourceLivestockId, string $targetLivestockId, string $mutationId, string $date, bool $dryRun = false): void
    {
        DB::beginTransaction();
        try {
            foreach ($items as $item) {
                $type = $item['type']; // e.g., feed, supply, vitamin, medicine
                $itemId = $item['item_id'];
                $unitId = $item['unit_id'];
                $inputQty = $item['quantity'];
                $farm = Livestock::find($sourceLivestockId);
                $targetFarm = Livestock::find($targetLivestockId);

                if (!$farm || !$targetFarm) {
                    throw new \Exception("Farm asal atau tujuan tidak ditemukan.");
                }

                // Get feed item for conversion information
                $feed = Feed::findOrFail($itemId);
                $conversionUnits = collect($feed->payload['conversion_units'] ?? []);

                // Get the conversion unit details
                $inputUnit = $conversionUnits->firstWhere('unit_id', $unitId);
                $smallestUnit = $conversionUnits->firstWhere('is_smallest', true);

                if (!$inputUnit || !$smallestUnit) {
                    throw new \Exception("Unit conversion information not found for feed: {$feed->name}");
                }

                // Calculate conversion values
                $inputUnitValue = floatval($inputUnit['value']);
                $smallestUnitValue = floatval($smallestUnit['value']);

                // Convert from input unit to smallest unit
                $requiredQtySmallest = ($inputQty * $inputUnitValue) / $smallestUnitValue;

                // Ambil model stok (Current*) dari farm asal
                $stockQuerySource = FeedStock::where('livestock_id', $sourceLivestockId)
                    ->where('feed_id', $itemId);

                $stocksSource = $stockQuerySource->whereRaw('(quantity_in - quantity_used - quantity_mutated) > 0')
                    ->orderBy('date')
                    ->orderBy('created_at')
                    ->lockForUpdate()
                    ->get();

                $remainingRequiredQtySmallest = $requiredQtySmallest;

                foreach ($stocksSource as $stockSource) {
                    if ($remainingRequiredQtySmallest <= 0) {
                        break;
                    }

                    $availableSource = $stockSource->quantity_in - $stockSource->quantity_used - $stockSource->quantity_mutated;
                    $takeQtySmallest = min($availableSource, $remainingRequiredQtySmallest);

                    if (!$dryRun) {
                        // Mutasi stok asal
                        $stockSource->quantity_mutated += $takeQtySmallest;
                        $stockSource->save();

                        // Get source purchase details for accurate unit tracking
                        $sourcePurchase = null;
                        if ($stockSource->feed_purchase_id) {
                            $sourcePurchase = FeedPurchase::find($stockSource->feed_purchase_id);
                        }

                        // Create target stock with unit information
                        $stockData = [
                            'id' => Str::uuid(),
                            'livestock_id' => $targetLivestockId,
                            'feed_id' => $itemId,
                            'feed_purchase_id' => $stockSource->feed_purchase_id,
                            'date' => $date,
                            'source_type' => 'mutation',
                            'source_id' => $mutationId,
                            'quantity_in' => $takeQtySmallest,
                            'quantity_used' => 0,
                            'quantity_mutated' => 0,
                            'available' => $takeQtySmallest,
                            'created_by' => auth()->id(),
                        ];

                        // If we have purchase information, add accurate unit and amount data
                        if ($sourcePurchase) {
                            $proportionalAmount = ($takeQtySmallest / $stockSource->quantity_in) * $stockSource->amount;
                            $stockData['amount'] = $proportionalAmount;

                            // Store unit information from the original purchase
                            $stockData['original_unit_id'] = $sourcePurchase->unit_id;
                            $stockData['converted_unit_id'] = $sourcePurchase->converted_unit;
                            $stockData['unit_metadata'] = [
                                'purchase_unit_id' => $sourcePurchase->unit_id,
                                'purchase_unit_name' => Unit::find($sourcePurchase->unit_id)?->name,
                                'converted_unit_id' => $sourcePurchase->converted_unit,
                                'converted_unit_name' => Unit::find($sourcePurchase->converted_unit)?->name,
                                'input_unit_id' => $unitId,
                                'input_unit_name' => Unit::find($unitId)?->name,
                                'conversion_rate' => $inputUnitValue / $smallestUnitValue,
                            ];
                        } else {
                            // If no purchase info, estimate based on source stock
                            $stockData['amount'] = ($takeQtySmallest / $stockSource->quantity_in) * ($stockSource->amount ?? 0);
                        }

                        FeedStock::create($stockData);

                        // Catat mutation_items dengan detail unit
                        MutationItem::create([
                            'id' => Str::uuid(),
                            'mutation_id' => $mutationId,
                            'item_type' => $type,
                            'item_id' => $itemId,
                            'stock_id' => $stockSource->id,
                            'quantity' => $takeQtySmallest,
                            'unit_id' => $smallestUnit['unit_id'], // Store in smallest unit
                            'source_unit_id' => $unitId, // Original input unit
                            'conversion_rate' => $inputUnitValue / $smallestUnitValue, // Store conversion rate
                            'unit_metadata' => [
                                'input_unit_id' => $unitId,
                                'input_quantity' => $inputQty,
                                'smallest_unit_id' => $smallestUnit['unit_id'],
                                'smallest_quantity' => $takeQtySmallest,
                                'conversion_rate' => $inputUnitValue / $smallestUnitValue,
                            ],
                            'created_by' => auth()->id(),
                        ]);
                    }

                    $remainingRequiredQtySmallest -= $takeQtySmallest;
                }

                if ($remainingRequiredQtySmallest > 0) {
                    // Convert back to input units for user-friendly message
                    $remainingInputQty = ($remainingRequiredQtySmallest * $smallestUnitValue) / $inputUnitValue;
                    $unitName = Unit::find($unitId)?->name ?? '';

                    throw new \Exception("Stok tidak cukup untuk {$type}: {$feed->name}. Kekurangan: " .
                        number_format($remainingInputQty, 2) . " {$unitName}");
                }
            }

            if (!$dryRun) {
                DB::commit();
            } else {
                DB::rollBack(); // Rollback jika dry run
            }
        } catch (Throwable $e) {
            DB::rollBack();
            throw $e;
        }
    }

    // public static function feedMutation(array $data, array $items, ?string $mutationId = null): Mutation
    // {
    //     return DB::transaction(function () use ($data, $items, $mutationId) {
    //         $isUpdate = !empty($mutationId);

    //         // Cek apakah mutation sudah ada
    //         $mutation = $isUpdate
    //             ? Mutation::findOrFail($mutationId)
    //             : new Mutation();

    //         // Update atau isi data mutation
    //         $mutation->fill([
    //             'id' => $mutationId ?? Str::uuid(),
    //             'type' => 'feed',
    //             'date' => $data['date'],
    //             'from_livestock_id' => $data['source_livestock_id'],
    //             'to_livestock_id' => $data['destination_livestock_id'],
    //             'notes' => $data['notes'] ?? null,
    //             'created_by' => auth()->id(),
    //         ]);


    //         if (!$isUpdate) {
    //             $mutation->save();
    //         } else {
    //             $mutation->update();
    //             // Jika update: hapus item lama
    //             MutationItem::where('mutation_id', $mutation->id)->delete();
    //         }

    //         // dd($mutation);

    //         // Mutasi item
    //         self::mutateFeedItems(
    //             items: $items,
    //             sourceLivestockId: $mutation->from_livestock_id,
    //             targetLivestockId: $mutation->to_livestock_id,
    //             mutationId: $mutation->id,
    //             date: $mutation->date,
    //             dryRun: false
    //         );

    //         return $mutation;
    //     });
    // }


    public static function supplyMutation(array $data, array $items, ?string $mutationId = null): Mutation
    {
        // dd($data);

        return DB::transaction(function () use ($data, $items, $mutationId) {
            $isUpdate = !empty($mutationId);

            // Cek apakah mutation sudah ada
            $mutation = $isUpdate
                ? Mutation::findOrFail($mutationId)
                : new Mutation();

            // Update atau isi data mutation
            $mutation->fill([
                'id' => $mutationId ?? Str::uuid(),
                'type' => 'supply',
                'date' => $data['date'],
                'from_farm_id' => $data['source_farm_id'],
                'to_farm_id' => $data['destination_farm_id'],
                'notes' => $data['notes'] ?? null,
                'created_by' => auth()->id(),
            ]);


            if (!$isUpdate) {
                $mutation->save();
            } else {
                $mutation->update();
                // Jika update: hapus item lama
                MutationItem::where('mutation_id', $mutation->id)->delete();
            }

            // dd($mutation);

            // Mutasi item
            self::mutateSupplyItems(
                items: $items,
                sourceFarmId: $mutation->from_farm_id,
                targetFarmId: $mutation->to_farm_id,
                mutationId: $mutation->id,
                date: $mutation->date,
                dryRun: false
            );

            return $mutation;
        });
    }

    /**
     * Mutasi item supply dari satu farm ke farm lain.
     *
     * @param array  $items        Array detail item mutasi.
     * @param string $sourceFarmId ID farm asal.
     * @param string $targetFarmId ID farm tujuan.
     * @param string $mutationId   ID mutasi.
     * @param string $date         Tanggal mutasi.
     * @param bool   $dryRun       Apakah ini percobaan (tidak menyimpan perubahan).
     * @return void
     * @throws \Exception Jika stok tidak mencukupi.
     */
    public static function mutateSupplyItems(array $items, string $sourceFarmId, string $targetFarmId, string $mutationId, string $date, bool $dryRun = false): void
    {
        DB::beginTransaction();
        try {
            foreach ($items as $item) {
                $type = $item['type']; // e.g., feed, supply, vitamin, medicine
                $itemId = $item['item_id'];
                $unitId = $item['unit_id'];
                $inputQty = $item['quantity'];
                $farm = Farm::find($sourceFarmId);
                $targetFarm = Farm::find($targetFarmId);

                if (!$farm || !$targetFarm) {
                    throw new \Exception("Farm asal atau tujuan tidak ditemukan.");
                }

                // Konversi ke satuan terkecil
                $requiredQtySmallest = ItemConversionService::toSmallest($type, $itemId, $unitId, $inputQty);

                // Ambil model stok (Current*) dari farm asal
                $stockQuerySource = match ($type) {
                    'feed' => FeedStock::where('farm_id', $sourceFarmId)->where('feed_id', $itemId),
                    default => SupplyStock::where('farm_id', $sourceFarmId)->where('supply_id', $itemId),
                };

                $stocksSource = $stockQuerySource->whereRaw('(quantity_in - quantity_used - quantity_mutated) > 0')
                    ->orderBy('date')
                    ->orderBy('created_at')
                    ->lockForUpdate()
                    ->get();

                $remainingRequiredQtySmallest = $requiredQtySmallest;

                foreach ($stocksSource as $stockSource) {
                    if ($remainingRequiredQtySmallest <= 0) {
                        break;
                    }

                    $availableSource = $stockSource->quantity_in - $stockSource->quantity_used - $stockSource->quantity_mutated;
                    $takeQtySmallest = min($availableSource, $remainingRequiredQtySmallest);

                    if (!$dryRun) {
                        // Mutasi stok asal
                        $stockSource->quantity_mutated += $takeQtySmallest;
                        $stockSource->save();

                        // Tambah stok ke farm tujuan
                        $targetModel = $type === 'feed' ? FeedStock::class : SupplyStock::class;
                        $stockField = $type === 'feed' ? 'feed_id' : 'supply_id';
                        $purchaseField = $type === 'feed' ? 'feed_purchase_id' : 'supply_purchase_id';
                        $purchaseValue = $type === 'feed' ? $stockSource->feed_purchase_id : $stockSource->supply_purchase_id;

                        $targetModel::create([
                            'id' => Str::uuid(),
                            'farm_id' => $targetFarmId,
                            $stockField => $itemId,
                            $purchaseField => $purchaseValue,
                            'date' => $date,
                            'source_type' => 'mutation',
                            'source_id' => $mutationId,
                            'quantity_in' => $takeQtySmallest,
                            'quantity_used' => 0,
                            'quantity_mutated' => 0,
                            // 'available' => $takeQtySmallest,
                            // 'amount' => $takeQtySmallest * ($stockSource->amount / $stockSource->quantity_in),
                            'created_by' => auth()->id(),
                        ]);

                        // Catat mutation_items
                        MutationItem::create([
                            'id' => Str::uuid(),
                            'mutation_id' => $mutationId,
                            'item_type' => $type,
                            'item_id' => $itemId,
                            'stock_id' => $stockSource->id,
                            'quantity' => $takeQtySmallest,
                            'created_by' => auth()->id(),
                        ]);
                    }

                    $remainingRequiredQtySmallest -= $takeQtySmallest;
                }

                if ($remainingRequiredQtySmallest > 0) {
                    $itemName = match ($type) {
                        'feed' => Feed::find($itemId)?->name,
                        default => Supply::find($itemId)?->name,
                    };
                    throw new \Exception("Stok tidak cukup untuk {$type}: {$itemName}. Kekurangan: " . ItemConversionService::fromSmallest($type, $itemId, $unitId, $remainingRequiredQtySmallest) . " {$item['unit_name']}");
                }
            }

            if (!$dryRun) {
                DB::commit();
            } else {
                DB::rollBack(); // Rollback jika dry run
            }
        } catch (Throwable $e) {
            DB::rollBack();
            throw $e;
        }
    }

    // public static function mutateFeedItems(array $items, string $sourceLivestockId, string $targetLivestockId, string $mutationId, string $date, bool $dryRun = false): void
    // {
    //     DB::beginTransaction();
    //     try {
    //         foreach ($items as $item) {
    //             $type = $item['type']; // e.g., feed, supply, vitamin, medicine
    //             $itemId = $item['item_id'];
    //             $unitId = $item['unit_id'];
    //             $inputQty = $item['quantity'];
    //             $farm = Livestock::find($sourceLivestockId);
    //             $targetFarm = Livestock::find($targetLivestockId);

    //             if (!$farm || !$targetFarm) {
    //                 throw new \Exception("Farm asal atau tujuan tidak ditemukan.");
    //             }

    //             // Konversi ke satuan terkecil
    //             $requiredQtySmallest = ItemConversionService::toSmallest($type, $itemId, $unitId, $inputQty);

    //             // Ambil model stok (Current*) dari farm asal
    //             $stockQuerySource = match ($type) {
    //                 'feed' => FeedStock::where('livestock_id', $sourceLivestockId)->where('feed_id', $itemId),
    //             };

    //             $stocksSource = $stockQuerySource->whereRaw('(quantity_in - quantity_used - quantity_mutated) > 0')
    //                 ->orderBy('date')
    //                 ->orderBy('created_at')
    //                 ->lockForUpdate()
    //                 ->get();

    //             $remainingRequiredQtySmallest = $requiredQtySmallest;

    //             foreach ($stocksSource as $stockSource) {
    //                 if ($remainingRequiredQtySmallest <= 0) {
    //                     break;
    //                 }

    //                 $availableSource = $stockSource->quantity_in - $stockSource->quantity_used - $stockSource->quantity_mutated;
    //                 $takeQtySmallest = min($availableSource, $remainingRequiredQtySmallest);

    //                 if (!$dryRun) {
    //                     // Mutasi stok asal
    //                     $stockSource->quantity_mutated += $takeQtySmallest;
    //                     $stockSource->save();

    //                     // Tambah stok ke farm tujuan
    //                     $targetModel = $type === 'feed' ? FeedStock::class : SupplyStock::class;
    //                     $stockField = $type === 'feed' ? 'feed_id' : 'supply_id';
    //                     $purchaseField = $type === 'feed' ? 'feed_purchase_id' : 'supply_purchase_id';
    //                     $purchaseValue = $type === 'feed' ? $stockSource->feed_purchase_id : $stockSource->supply_purchase_id;

    //                     $targetModel::create([
    //                         'id' => Str::uuid(),
    //                         'livestock_id' => $targetLivestockId,
    //                         $stockField => $itemId,
    //                         $purchaseField => $purchaseValue,
    //                         'date' => $date,
    //                         'source_type' => 'mutation',
    //                         'source_id' => $mutationId,
    //                         'quantity_in' => $takeQtySmallest,
    //                         'quantity_used' => 0,
    //                         'quantity_mutated' => 0,
    //                         // 'available' => $takeQtySmallest,
    //                         // 'amount' => $takeQtySmallest * ($stockSource->amount / $stockSource->quantity_in),
    //                         'created_by' => auth()->id(),
    //                     ]);

    //                     // Catat mutation_items
    //                     MutationItem::create([
    //                         'id' => Str::uuid(),
    //                         'mutation_id' => $mutationId,
    //                         'item_type' => $type,
    //                         'item_id' => $itemId,
    //                         'stock_id' => $stockSource->id,
    //                         'quantity' => $takeQtySmallest,
    //                         'created_by' => auth()->id(),
    //                     ]);
    //                 }

    //                 $remainingRequiredQtySmallest -= $takeQtySmallest;
    //             }

    //             if ($remainingRequiredQtySmallest > 0) {
    //                 $itemName = match ($type) {
    //                     'feed' => Feed::find($itemId)?->name,
    //                     default => Supply::find($itemId)?->name,
    //                 };
    //                 throw new \Exception("Stok tidak cukup untuk {$type}: {$itemName}. Kekurangan: " . ItemConversionService::fromSmallest($type, $itemId, $unitId, $remainingRequiredQtySmallest) . " {$item['unit_name']}");
    //             }
    //         }

    //         if (!$dryRun) {
    //             DB::commit();
    //         } else {
    //             DB::rollBack(); // Rollback jika dry run
    //         }
    //     } catch (Throwable $e) {
    //         DB::rollBack();
    //         throw $e;
    //     }
    // }

    // public static function saveOrUpdateMutation(array $data, array $items, ?string $mutationId = null): Mutation
    // {
    //     return DB::transaction(function () use ($data, $items, $mutationId) {
    //         $isUpdate = !empty($mutationId);

    //         // Cek apakah mutation sudah ada
    //         $mutation = $isUpdate
    //             ? Mutation::findOrFail($mutationId)
    //             : new Mutation();

    //         // Update atau isi data mutation
    //         $mutation->fill([
    //             'id' => $mutationId ?? Str::uuid(),
    //             'date' => $data['date'],
    //             'from_livestock_id' => $data['from_livestock_id'],
    //             'to_livestock_id' => $data['to_livestock_id'],
    //             'notes' => $data['notes'] ?? null,
    //             'created_by' => auth()->id(),
    //         ]);


    //         if (!$isUpdate) {
    //             $mutation->save();
    //         } else {
    //             $mutation->update();
    //             // Jika update: hapus item lama
    //             \App\Models\MutationItem::where('mutation_id', $mutation->id)->delete();
    //         }

    //         // Mutasi item
    //         self::mutateItems(
    //             items: $items,
    //             sourceLivestockId: $mutation->from_livestock_id,
    //             targetLivestockId: $mutation->to_livestock_id,
    //             mutationId: $mutation->id,
    //             date: $mutation->date,
    //             dryRun: false
    //         );

    //         return $mutation;
    //     });
    // }

    // public static function mutateItems(array $items, string $sourceLivestockId, string $targetLivestockId, string $mutationId, string $date, bool $dryRun = false): void
    // {
    //     foreach ($items as $item) {
    //         $type = $item['type']; // e.g., feed, supply, vitamin, medicine
    //         $itemId = $item['item_id'];
    //         $unitId = $item['unit_id'];
    //         $inputQty = $item['quantity'];
    //         $livestock = Livestock::find($sourceLivestockId);

    //         // Konversi ke satuan terkecil
    //         $requiredQty = ItemConversionService::toSmallest($type, $itemId, $unitId, $inputQty);

    //         // Ambil model stok (Current*)
    //         $stockQuery = match ($type) {
    //             'feed' => FeedStock::where('livestock_id', $sourceLivestockId)->where('feed_id', $itemId),
    //             default => SupplyStock::where('farm_id', $livestock->farm_id)->where('supply_id', $itemId),
    //         };

    //         $stocks = $stockQuery->whereRaw('(quantity_in - quantity_used - quantity_mutated) > 0')
    //             ->orderBy('date')
    //             ->orderBy('created_at')
    //             ->lockForUpdate()
    //             ->get();

    //         foreach ($stocks as $stock) {
    //             if ($requiredQty <= 0) break;

    //             $available = $stock->quantity_in - $stock->quantity_used - $stock->quantity_mutated;
    //             $takeQty = min($available, $requiredQty);

    //             if (!$dryRun) {
    //                 // Mutasi stok asal
    //                 $stock->quantity_mutated += $takeQty;
    //                 $stock->save();

    //                 // Tambah stok ke target livestock
    //                 $targetModel = $type === 'feed' ? FeedStock::class : SupplyStock::class;
    //                 $stockField = $type === 'feed' ? 'feed_id' : 'supply_id';
    //                 $purchaseField = $type === 'feed' ? 'feed_purchase_id' : 'supply_purchase_id';
    //                 $purchaseValue = $type === 'feed' ? $stock->feed_purchase_id : $stock->supply_purchase_id;


    //                 $targetModel::create([
    //                     'id' => Str::uuid(),
    //                     'livestock_id' => $targetLivestockId,
    //                     $stockField => $itemId,
    //                     $purchaseField => $purchaseValue,
    //                     'date' => $date,
    //                     'source_id' => $mutationId,
    //                     'quantity_in' => $takeQty,
    //                     'quantity_used' => 0,
    //                     'quantity_mutated' => 0,
    //                     'available' => $takeQty,
    //                     'amount' => $takeQty * ($stock->amount / $stock->quantity_in),
    //                     'created_by' => auth()->id(),
    //                 ]);

    //                 // Catat mutation_items (struktur baru)
    //                 MutationItem::create([
    //                     'id' => Str::uuid(),
    //                     'mutation_id' => $mutationId,
    //                     'item_type' => $type,
    //                     'item_id' => $itemId,
    //                     'stock_id' => $stock->id,
    //                     'quantity' => $takeQty,
    //                     'created_by' => auth()->id(),
    //                 ]);
    //             }

    //             $requiredQty -= $takeQty;
    //         }

    //         if ($requiredQty > 0) {
    //             $itemName = match ($type) {
    //                 'feed' => Feed::find($itemId)?->name,
    //                 default => Supply::find($itemId)?->name,
    //             };
    //             throw new \Exception("Stok tidak cukup untuk {$type}: {$itemName}. Kekurangan: {$requiredQty}");
    //         }
    //     }
    // }

    // public static function mutateItems(array $items, string $sourceLivestockId, string $targetLivestockId, string $mutationId, string $date, bool $dryRun = false): void
    // {
    //     foreach ($items as $item) {
    //         $type = $item['type'];
    //         $itemId = $item['item_id'];
    //         $unitId = $item['unit_id'];
    //         $inputQty = $item['quantity'];

    //         // Konversi ke satuan terkecil
    //         $requiredQty = ItemConversionService::toSmallest($type, $itemId, $unitId, $inputQty);

    //         // Ambil model stok
    //         $stocks = match ($type) {
    //             'feed' => CurrentFeed::where('livestock_id', $sourceLivestockId)->where('feed_id', $itemId),
    //             default => CurrentSupply::where('livestock_id', $sourceLivestockId)->where('item_id', $itemId),
    //         };

    //         $stocks = $stocks->whereRaw('(quantity_in - quantity_used - quantity_mutated) > 0')
    //             ->orderBy('date')
    //             ->orderBy('created_at')
    //             ->lockForUpdate()
    //             ->get();

    //         foreach ($stocks as $stock) {
    //             if ($requiredQty <= 0) break;

    //             $available = $stock->quantity_in - $stock->quantity_used - $stock->quantity_mutated;
    //             $takeQty = min($available, $requiredQty);

    //             if (!$dryRun) {
    //                 // Update stok asal
    //                 $stock->quantity_mutated += $takeQty;
    //                 $stock->save();

    //                 // Tambah stok ke ternak tujuan
    //                 $targetModel = $type === 'feed' ? CurrentFeed::class : CurrentSupply::class;
    //                 $targetModel::create([
    //                     'id' => Str::uuid(),
    //                     'livestock_id' => $targetLivestockId,
    //                     $type === 'feed' ? 'feed_id' : 'item_id' => $itemId,
    //                     'item_purchase_id' => $stock->item_purchase_id ?? null,
    //                     'date' => $date,
    //                     'source_id' => $mutationId,
    //                     'quantity_in' => $takeQty,
    //                     'quantity_used' => 0,
    //                     'quantity_mutated' => 0,
    //                     'available' => $takeQty,
    //                     'amount' => $takeQty * ($stock->amount / $stock->quantity_in),
    //                     'created_by' => auth()->id(),
    //                 ]);

    //                 // Catat item mutasi
    //                 $mutationItemModel = $type === 'feed' ? FeedMutationItem::class : SupplyMutationItem::class;
    //                 $mutationItemModel::create([
    //                     $type === 'feed' ? 'feed_mutation_id' : 'supply_mutation_id' => $mutationId,
    //                     $type === 'feed' ? 'feed_stock_id' : 'supply_stock_id' => $stock->id,
    //                     'item_id' => $itemId,
    //                     'quantity' => $takeQty,
    //                     'created_by' => auth()->id(),
    //                 ]);
    //             }

    //             $requiredQty -= $takeQty;
    //         }

    //         if ($requiredQty > 0) {
    //             $itemName = $type === 'feed' ? Feed::find($itemId)?->name : Supply::find($itemId)?->name;
    //             throw new Exception("Stok tidak cukup untuk {$type}: {$itemName}. Kekurangan: {$requiredQty}");
    //         }
    //     }
    // }
}
